/**
 * 
 */
package com.gateway.traineeproject.controller;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityExistsException;
import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.gateway.traineeproject.model.ModelMaster;
import com.gateway.traineeproject.model.VehicleMaster;
import com.gateway.traineeproject.service.VehicleMasterService;

import javassist.NotFoundException;

/**
 * @author Hiren Khatri
 *
 */
@RestController
public class VehicleMasterController {
	
	@Autowired
	private VehicleMasterService vehicleMasterService;
	
	@GetMapping("/api/vehicles")
	public List<VehicleMaster> getAllVehicles(){
		return vehicleMasterService.findAll();
	}
	
	@GetMapping("/api/vehicles/{id}")
	public ResponseEntity<ModelMaster> getVehicle(@PathVariable Long id) throws NotFoundException {
		Optional<VehicleMaster> foundBrand = vehicleMasterService.findById(id);

		if (!foundBrand.isPresent()) {
			throw new NotFoundException("Brand not found with id: " + id);
		}

		VehicleMaster vehicle = foundBrand.get();

		return ResponseEntity.ok(vehicle);
	}
	
	@RequestMapping(value = "/api/vehicles", method = RequestMethod.POST)
	public ResponseEntity<VehicleMaster> createModel(@RequestBody VehicleMaster vehicleToBeSaved) throws URISyntaxException {
		try {
			ModelMaster model = modelMasterService.save(modelToBeSaved);
			return ResponseEntity.created(new URI("/api/models/" + model.getId())).body(model);
		} catch (EntityExistsException e) {
			return new ResponseEntity<ModelMaster>(HttpStatus.CONFLICT);
		}
	}
	
	@RequestMapping(value = "/api/models", method = RequestMethod.PUT)
	public ResponseEntity<ModelMaster> updateModel(@RequestBody VehicleMaster vehicleToBeUpdated) throws URISyntaxException {
		try {
			ModelMaster model = modelMasterService.update(modelToBeUpdated);
			return ResponseEntity.created(new URI("/api/models/" + model.getId())).body(model);
		} catch (EntityNotFoundException e) {
			return new ResponseEntity<ModelMaster>(HttpStatus.CONFLICT);
		}
	}

	@RequestMapping(value = "/api/models/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<Void> deleteModel(@PathVariable Long id) {
		try {
			modelMasterService.delete(id);
			return ResponseEntity.ok().build();
		} catch (EntityNotFoundException e) {
			return new ResponseEntity<Void>(HttpStatus.CONFLICT);
		}
	}
}
